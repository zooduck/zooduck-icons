{"version":3,"sources":["scripts/zooduck-icons/base/zooduck-icon.base.ts","scripts/zooduck-icons/location/zooduck-icon.location.ts","scripts/zooduck-icons/skyduck/zooduck-icon.skyduck.ts","scripts/zooduck-icons/skyduck-alt/zooduck-icon.skyduck-alt.ts","scripts/zooduck-icons/skyduck-in-flight/zooduck-icon.skyduck-in-flight.ts","scripts/zooduck-icons/spinner-blades/zooduck-icon.spinner-blades.ts","scripts/zooduck-icons/toggle/zooduck-icon.toggle.ts","scripts/zooduck-icons/circle/zooduck-icon.circle.ts","scripts/zooduck-icons/index.ts","index.ts"],"names":[],"mappings":"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","file":"zooduck-icons.min.js","sourceRoot":"..\\src","sourcesContent":["const tagName = 'zooduck-icon-base';\r\nexport class HTMLZooduckIconBaseElement extends HTMLElement {\r\n    private _content: HTMLElement;\r\n    private _backgroundColor = '#fff';\r\n    private _baseStyle: string;\r\n    private _color = '#222';\r\n    private _defaultBackgroundColor: string;\r\n    private _defaultColor: string;\r\n    private _defaultSize: string;\r\n    private _size = '50';\r\n    private _styleContent: string;\r\n    private _stylesheet: HTMLStyleElement;\r\n    private _vars: string;\r\n\r\n    constructor() {\r\n        super();\r\n\r\n        this._defaultBackgroundColor = this._backgroundColor;\r\n        this._defaultColor = this._color;\r\n        this._defaultSize = this._size;\r\n\r\n        this.attachShadow({ mode: 'open' });\r\n\r\n        this._stylesheet = document.createElement('style');\r\n    }\r\n\r\n    static get observedAttributes() {\r\n        return [\r\n            'backgroundcolor',\r\n            'color',\r\n            'size',\r\n        ];\r\n    }\r\n\r\n    private _setBaseStyle() {\r\n        this._baseStyle = `\r\n            * {\r\n                box-sizing: border-box !important;\r\n            }\r\n        `;\r\n    }\r\n\r\n    private _setVars() {\r\n        this._vars = `\r\n            :host {\r\n                --zooduck-icon-background-color: ${this._backgroundColor};\r\n                --zooduck-icon-color: ${this._color};\r\n                --zooduck-icon-size: ${this._size}px;\r\n                box-sizing: border-box;\r\n            }\r\n\r\n            * {\r\n                box-sizing: border-box !important;\r\n            }\r\n        `;\r\n    }\r\n\r\n    private _syncAttr(name: string, val: string) {\r\n        this.setAttribute(name, val);\r\n    }\r\n\r\n    private _updateStyle() {\r\n        this._setVars();\r\n        this._setBaseStyle();\r\n\r\n        this._stylesheet.textContent = `${this._vars}${this._baseStyle}${this._styleContent}`;\r\n    }\r\n\r\n    public set backgroundcolor(val: string) {\r\n        const parsedVal = val || this._defaultBackgroundColor;\r\n        this._backgroundColor = parsedVal;\r\n        this._syncAttr('backgroundcolor', parsedVal);\r\n        this.update();\r\n    }\r\n\r\n    public get backgroundcolor(): string {\r\n        return this._backgroundColor;\r\n    }\r\n\r\n    public set color(val: string) {\r\n        const parsedVal = val || this._defaultColor;\r\n        this._color = parsedVal;\r\n        this._syncAttr('color', parsedVal);\r\n        this.update();\r\n    }\r\n\r\n    public get color(): string {\r\n        return this._color;\r\n    }\r\n\r\n    public set defaultBackgroundColor(val: string) {\r\n        this._backgroundColor = val;\r\n        this.update();\r\n    }\r\n\r\n    public set defaultColor(val: string) {\r\n        this._color = val;\r\n        this.update();\r\n    }\r\n\r\n    public set defaultSize(val: string) {\r\n        this._size = val;\r\n        this.update();\r\n    }\r\n\r\n    public set size(val: string) {\r\n        const parsedVal = val || this._defaultSize;\r\n        this._size = parseInt(parsedVal, 10).toString();\r\n        this._syncAttr('size', parsedVal);\r\n        this.update();\r\n    }\r\n\r\n    public get size(): string {\r\n        return this._size;\r\n    }\r\n\r\n    public set styleContent(textContent: string) {\r\n        this._styleContent = textContent;\r\n    }\r\n\r\n    public get styleContent(): string {\r\n        return this._styleContent;\r\n    }\r\n\r\n    public set content(content: HTMLElement) {\r\n        this._content = content;\r\n    }\r\n\r\n    public get content(): HTMLElement {\r\n        return this._content;\r\n    }\r\n\r\n    public render() {\r\n        this.shadowRoot.innerHTML = '';\r\n        this.shadowRoot.appendChild(this._stylesheet);\r\n        this.shadowRoot.appendChild(this._content);\r\n\r\n        this.update();\r\n    }\r\n\r\n    public update() {\r\n        this._updateStyle();\r\n    }\r\n\r\n    protected attributeChangedCallback(name: string, _oldVal: string, newVal: string) {\r\n        if (this[name] === newVal) {\r\n            return;\r\n        }\r\n\r\n        this[name] = newVal;\r\n    }\r\n}\r\n\r\ncustomElements.define(tagName, HTMLZooduckIconBaseElement);\r\n","import { HTMLZooduckIconBaseElement } from '../base/zooduck-icon.base';\r\n\r\nconst tagName = 'zooduck-icon-location';\r\n\r\nexport class HTMLZooduckIconLocationElement extends HTMLZooduckIconBaseElement {\r\n    constructor() {\r\n        super();\r\n    }\r\n\r\n    private _build() {\r\n        this.styleContent = this._buildStyleContent();\r\n        this.content = this._buildContent();\r\n\r\n        this.render();\r\n    }\r\n\r\n    private _buildContent(): HTMLElement {\r\n        const content = new DOMParser().parseFromString(`\r\n            <div class=\"location-icon\">\r\n                <div class=\"location-icon__circle\">\r\n                    <div class=\"location-icon__inner-circle\">\r\n                        <div class=\"location-icon__point\"></div>\r\n                    </div>\r\n                </div>\r\n                <div class=\"location-icon__x-bar\"></div>\r\n                <div class=\"location-icon__y-bar\"></div>\r\n            </div>\r\n        `, 'text/html').body.firstChild as HTMLElement;\r\n\r\n        return content;\r\n    }\r\n\r\n    private _buildStyleContent(): string {\r\n        const styleContent = `\r\n            .location-icon {\r\n                position: relative;\r\n                display: flex;\r\n                width: var(--zooduck-icon-size);\r\n                height: var(--zooduck-icon-size);\r\n                align-items: center;\r\n                justify-content: center;\r\n            }\r\n            .location-icon__circle {\r\n                position: relative;\r\n                display: flex;\r\n                align-items: center;\r\n                justify-content: center;\r\n                clip-path: circle(48%);\r\n                width: 80%;\r\n                height: 80%;\r\n                z-index: 1;\r\n                background-color: var(--zooduck-icon-color);\r\n            }\r\n            .location-icon__inner-circle {\r\n                position: relative;\r\n                display: flex;\r\n                align-items: center;\r\n                justify-content: center;\r\n                clip-path: circle(48%);\r\n                width: 70%;\r\n                height: 70%;\r\n                background-color: var(--zooduck-icon-background-color);\r\n            }\r\n            .location-icon__point {\r\n                width: 60%;\r\n                height: 60%;\r\n                clip-path: circle(48%);\r\n                background-color: var(--zooduck-icon-color);\r\n            }\r\n            .location-icon__x-bar,\r\n            .location-icon__y-bar {\r\n                position: absolute;\r\n                left: auto;\r\n                top: auto;\r\n                width: 10%;\r\n                height: 100%;\r\n                background-color: var(--zooduck-icon-color);\r\n            }\r\n            .location-icon__y-bar {\r\n                width: 100%;\r\n                height: 10%;\r\n            }\r\n        `;\r\n\r\n        return styleContent;\r\n    }\r\n\r\n    protected connectedCallback() {\r\n        if (!this.isConnected) {\r\n            return;\r\n        }\r\n\r\n        this._build();\r\n    }\r\n}\r\n\r\ncustomElements.define(tagName, HTMLZooduckIconLocationElement);\r\n","import { HTMLZooduckIconBaseElement } from '../base/zooduck-icon.base';\r\n\r\nconst tagName = 'zooduck-icon-skyduck';\r\n\r\nexport class HTMLZooduckIconSkyduckElement extends HTMLZooduckIconBaseElement {\r\n    constructor() {\r\n        super();\r\n    }\r\n\r\n    private _build() {\r\n        this.styleContent = this._buildStyleContent();\r\n        this.content = this._buildContent();\r\n\r\n        this.render();\r\n    }\r\n\r\n    private _buildContent(): HTMLElement {\r\n        const content = new DOMParser().parseFromString(`\r\n            <div class=\"skyduck-icon\">\r\n                <div class=\"skyduck-icon__body\">\r\n                    <div class=\"skyduck-icon__beak\"></div>\r\n                </div>\r\n                <div class=\"skyduck-icon__wing-left\"></div>\r\n                <div class=\"skyduck-icon__wing-right\"></div>\r\n                <div class=\"skyduck-icon__eye-left\"></div>\r\n                <div class=\"skyduck-icon__eye-right\"></div>\r\n            </div>\r\n        `, 'text/html').body.firstChild as HTMLElement;\r\n\r\n        return content;\r\n    }\r\n\r\n    private _buildStyleContent(): string {\r\n        const styleContent = `\r\n            .skyduck-icon {\r\n                position: relative;\r\n                width: var(--zooduck-icon-size);\r\n                height: var(--zooduck-icon-size);\r\n                display: grid;\r\n                grid-template-columns: repeat(20, 5%);\r\n                grid-template-rows: repeat(20, 5%);\r\n            }\r\n            .skyduck-icon__wing-left {\r\n                grid-row: 3 / span 4;\r\n                grid-column: 6 / span 14;\r\n                background-color: var(--zooduck-icon-color);\r\n                transform: skewY(-30deg) rotate(20deg);\r\n            }\r\n            .skyduck-icon__wing-right {\r\n                grid-row: 4 / span 15;\r\n                grid-column: 4 / span 4;\r\n                background-color: var(--zooduck-icon-color);\r\n                transform: skewY(-30deg);\r\n            }\r\n            .skyduck-icon__body {\r\n                display: flex;\r\n                align-items: center;\r\n                justify-content: center;\r\n                clip-path: circle(50%);\r\n                background-color: var(--zooduck-icon-color);\r\n                grid-column: 1 / span 15;\r\n                grid-row: 1 / span 15;\r\n            }\r\n            .skyduck-icon__beak {\r\n                width: 60%;\r\n                height: 60%;\r\n                clip-path: circle(50%);\r\n                background-color: var(--zooduck-icon-background-color);\r\n            }\r\n            .skyduck-icon__eye-left,\r\n            .skyduck-icon__eye-right {\r\n                z-index: 1;\r\n                background-color: var(--zooduck-icon-background-color);\r\n                clip-path: circle(50%);\r\n            }\r\n            .skyduck-icon__eye-right {\r\n                grid-column: 4 / span 2;\r\n                grid-row: 7 / span 2;\r\n            }\r\n            .skyduck-icon__eye-left {\r\n                grid-column: 8 / span 2;\r\n                grid-row: 4 / span 2;\r\n            }\r\n        `;\r\n\r\n        return styleContent;\r\n    }\r\n\r\n    protected connectedCallback() {\r\n        if (!this.isConnected) {\r\n            return;\r\n        }\r\n\r\n        this._build();\r\n    }\r\n}\r\n\r\ncustomElements.define(tagName, HTMLZooduckIconSkyduckElement);\r\n","import { HTMLZooduckIconBaseElement } from '../base/zooduck-icon.base';\r\n\r\nconst tagName = 'zooduck-icon-skyduck-alt';\r\n\r\nexport class HTMLZooduckIconSkyduckAltElement extends HTMLZooduckIconBaseElement {\r\n    constructor() {\r\n        super();\r\n    }\r\n\r\n    private _build() {\r\n        this.styleContent = this._buildStyleContent();\r\n        this.content = this._buildContent();\r\n\r\n        this.render();\r\n    }\r\n\r\n    private _buildContent(): HTMLElement {\r\n        const content = new DOMParser().parseFromString(`\r\n            <div class=\"skyduck-grid\">\r\n                <div class=\"skyduck-grid__body\"></div>\r\n                <div class=\"skyduck-grid__beak\"></div>\r\n                <div class=\"skyduck-grid__wing-left\"></div>\r\n                <div class=\"skyduck-grid__wing-right\"></div>\r\n                <div class=\"skyduck-grid__eye-left\"></div>\r\n                <div class=\"skyduck-grid__eye-right\"></div>\r\n            </div>\r\n        `, 'text/html').body.firstChild as HTMLElement;\r\n\r\n        return content;\r\n    }\r\n\r\n    private _buildStyleContent(): string {\r\n        const styleContent = `\r\n            .skyduck-grid {\r\n                position: relative;\r\n                width: var(--zooduck-icon-size);\r\n                height: var(--zooduck-icon-size);\r\n                display: grid;\r\n                grid-template-columns: repeat(20, 5%);\r\n                grid-template-rows: repeat(20, 5%);\r\n            }\r\n            .skyduck-grid__wing-left {\r\n                z-index: 0;\r\n                grid-row: 3 / span 4;\r\n                grid-column: 6 / span 14;\r\n                background-color: var(--zooduck-icon-color);\r\n                transform: skewY(-30deg) rotate(20deg);\r\n            }\r\n            .skyduck-grid__wing-right {\r\n                z-index: 0;\r\n                grid-row: 4 / span 15;\r\n                grid-column: 4 / span 4;\r\n                background-color: var(--zooduck-icon-color);\r\n                transform: skewY(-30deg);\r\n            }\r\n            .skyduck-grid__body {\r\n                z-index: 1;\r\n                display: flex;\r\n                align-items: center;\r\n                justify-content: center;\r\n                clip-path: circle(50%);\r\n                background-color: var(--zooduck-icon-color);\r\n                grid-column: 1 / span 15;\r\n                grid-row: 1 / span 15;\r\n            }\r\n            .skyduck-grid__beak {\r\n                z-index: 2;\r\n                background-color: var(--zooduck-icon-background-color);\r\n                grid-column: 1 / span 11;\r\n                grid-row: 1 / span 11;\r\n                border-radius: 50%;\r\n                clip-path: polygon(50% 60%, 100% 70%, 100% 100%, 30% 100%);\r\n            }\r\n            .skyduck-grid__eye-left,\r\n            .skyduck-grid__eye-right {\r\n                z-index: 3;\r\n                background-color: var(--zooduck-icon-background-color);\r\n                clip-path: circle(50%);\r\n            }\r\n            .skyduck-grid__eye-right {\r\n                grid-column: 3 / span 2;\r\n                grid-row: 5 / span 2;\r\n            }\r\n            .skyduck-grid__eye-left {\r\n                grid-column: 7 / span 2;\r\n                grid-row: 4 / span 2;\r\n            }\r\n        `;\r\n\r\n        return styleContent;\r\n    }\r\n\r\n    protected connectedCallback() {\r\n        if (!this.isConnected) {\r\n            return;\r\n        }\r\n\r\n        this._build();\r\n    }\r\n}\r\n\r\ncustomElements.define(tagName, HTMLZooduckIconSkyduckAltElement);\r\n","import { HTMLZooduckIconBaseElement } from '../base/zooduck-icon.base';\r\n\r\nconst tagName = 'zooduck-icon-skyduck-in-flight';\r\n\r\nexport class HTMLZooduckIconSkyduckInFlightElement extends HTMLZooduckIconBaseElement {\r\n    private _sizeAdjust: number;\r\n\r\n    constructor() {\r\n        super();\r\n        this._sizeAdjust = .4807692308;\r\n    }\r\n\r\n    private _build() {\r\n        this.styleContent = this._buildStyleContent();\r\n        this.content = this._buildContent();\r\n\r\n        this.render();\r\n    }\r\n\r\n    private _buildContent(): HTMLElement {\r\n        const content = new DOMParser().parseFromString(`\r\n        <div class=\"skyduck-in-flight\">\r\n            <div class=\"skyduck-in-flight-grid\">\r\n            <div class=\"skyduck-in-flight-airflow\">\r\n                <span class=\"skyduck-in-flight-airflow__air --top\"></span>\r\n                <span class=\"skyduck-in-flight-airflow__air --mid-a\"></span>\r\n                <span class=\"skyduck-in-flight-airflow__air --mid-b\"></span>\r\n                <span class=\"skyduck-in-flight-airflow__air --mid-c\"></span>\r\n                <span class=\"skyduck-in-flight-airflow__air --mid-d\"></span>\r\n                <span class=\"skyduck-in-flight-airflow__air --bottom\"></span>\r\n            </div>\r\n            <div class=\"skyduck-in-flight-grid__body\"></div>\r\n            <div class=\"skyduck-in-flight-grid__beak\"></div>\r\n            <div class=\"skyduck-in-flight-grid__wing-left\"></div>\r\n            <div class=\"skyduck-in-flight-grid__wing-right\"></div>\r\n            <div class=\"skyduck-in-flight-grid__eye-left\"></div>\r\n            <div class=\"skyduck-in-flight-grid__eye-right\"></div>\r\n            </div>\r\n        </div>\r\n        `, 'text/html').body.firstChild as HTMLElement;\r\n\r\n        return content;\r\n    }\r\n\r\n    private _buildStyleContent(): string {\r\n        const styleContent = `\r\n            @keyframes airshift {\r\n                0% {\r\n                    transform: translate(0);\r\n                }\r\n                100% {\r\n                    transform: translate(100%);\r\n                }\r\n            }\r\n\r\n            .skyduck-in-flight {\r\n                box-sizing: border-box;\r\n                width: calc(var(--zooduck-icon-size) * ${this._sizeAdjust});\r\n                padding-top: calc(var(--zooduck-icon-size) * ${this._sizeAdjust} * .26);\r\n                padding-left: calc(var(--zooduck-icon-size) * ${this._sizeAdjust} * .26);\r\n                padding-right: calc(var(--zooduck-icon-size) * ${this._sizeAdjust} * 1.82);\r\n                padding-bottom: calc(var(--zooduck-icon-size) * ${this._sizeAdjust} * .12);\r\n            }\r\n            .skyduck-in-flight-airflow {\r\n                position: absolute;\r\n                left: 15%;\r\n                top: 10%;\r\n                width: 185%;\r\n                height: 80%;\r\n                display: grid;\r\n                grid-template-rows: repeat(26, 1fr);\r\n                gap: 2.5%;\r\n                overflow: hidden;\r\n                clip-path: polygon(75% 0%, 100% 100%, 0% 100%, 0% 0%);\r\n            }\r\n            .skyduck-in-flight-airflow__air {\r\n                background-color: var(--zooduck-icon-color);\r\n                animation: airshift linear infinite both;\r\n            }\r\n            .skyduck-in-flight-airflow__air.--top {\r\n                grid-row: 2 / span 3;\r\n                animation-duration: .15s;\r\n            }\r\n            .skyduck-in-flight-airflow__air.--mid-a {\r\n                grid-row: 6 / span 4;\r\n                animation-duration: .5s;\r\n            }\r\n            .skyduck-in-flight-airflow__air.--mid-b {\r\n                grid-row: 11 / span 4;\r\n                animation-duration: .2s;\r\n            }\r\n            .skyduck-in-flight-airflow__air.--mid-c {\r\n                grid-row: 15 / span 3;\r\n                animation-duration: .2s;\r\n                animation-delay: .1s;\r\n            }\r\n            .skyduck-in-flight-airflow__air.--mid-d {\r\n                grid-row: 19 / span 3;\r\n                animation-duration: .25s;\r\n                animation-delay: .25s;\r\n            }\r\n            .skyduck-in-flight-airflow__air.--bottom {\r\n                grid-row: 23 / span 4;\r\n                animation-duration: .15s;\r\n            }\r\n\r\n            .skyduck-in-flight-grid {\r\n                position: relative;\r\n                width: calc(var(--zooduck-icon-size) * ${this._sizeAdjust});\r\n                height: calc(var(--zooduck-icon-size) * ${this._sizeAdjust});\r\n                display: grid;\r\n                grid-template-columns: repeat(20, 5%);\r\n                grid-template-rows: repeat(20, 5%);\r\n                transform: rotate(-25deg);\r\n                transform-origin: bottom;\r\n            }\r\n            .skyduck-in-flight-grid__wing-left {\r\n                z-index: 0;\r\n                grid-row: 3 / span 4;\r\n                grid-column: 6 / span 14;\r\n                background-color: var(--zooduck-icon-color);\r\n                transform: skewY(-30deg) rotate(20deg);\r\n            }\r\n            .skyduck-in-flight-grid__wing-right {\r\n                z-index: 0;\r\n                grid-row: 4 / span 15;\r\n                grid-column: 4 / span 4;\r\n                background-color: var(--zooduck-icon-color);\r\n                transform: skewY(-30deg);\r\n            }\r\n            .skyduck-in-flight-grid__body {\r\n                z-index: 1;\r\n                display: flex;\r\n                align-items: center;\r\n                justify-content: center;\r\n                clip-path: circle(50%);\r\n                background-color: var(--zooduck-icon-color);\r\n                grid-column: 1 / span 15;\r\n                grid-row: 1 / span 15;\r\n            }\r\n            .skyduck-in-flight-grid__beak {\r\n                z-index: 2;\r\n                border-radius: 50%;\r\n                background-color: var(--zooduck-icon-background-color);\r\n                grid-column: 1 / span 11;\r\n                grid-row: 1 / span 11;\r\n                clip-path: polygon(50% 60%, 100% 70%, 100% 100%, 30% 100%);\r\n            }\r\n            .skyduck-in-flight-grid__eye-left,\r\n            .skyduck-in-flight-grid__eye-right {\r\n                z-index: 3;\r\n                background-color: var(--zooduck-icon-background-color);\r\n                clip-path: polygon(80% 0%, 0% 100%, 0% 100%, 100% 100%);\r\n            }\r\n            .skyduck-in-flight-grid__eye-right {\r\n                grid-column: 3 / span 2;\r\n                grid-row: 5 / span 2;\r\n            }\r\n            .skyduck-in-flight-grid__eye-left {\r\n                grid-column: 7 / span 2;\r\n                grid-row: 4 / span 2;\r\n            }\r\n        `;\r\n\r\n        return styleContent;\r\n    }\r\n\r\n    protected connectedCallback() {\r\n        if (!this.isConnected) {\r\n            return;\r\n        }\r\n\r\n        this._build();\r\n    }\r\n}\r\n\r\ncustomElements.define(tagName, HTMLZooduckIconSkyduckInFlightElement);\r\n","import { HTMLZooduckIconBaseElement } from '../base/zooduck-icon.base';\r\n\r\nconst tagName = 'zooduck-icon-spinner-blades';\r\n\r\nexport class HTMLZooduckIconSpinnerBladesElement extends HTMLZooduckIconBaseElement {\r\n    constructor() {\r\n        super();\r\n\r\n        this.defaultBackgroundColor = 'transparent';\r\n    }\r\n\r\n    private _build() {\r\n        this.styleContent = this._buildStyleContent();\r\n        this.content = this._buildContent();\r\n\r\n        this.render();\r\n    }\r\n\r\n    private _buildContent(): HTMLElement {\r\n        const content = new DOMParser().parseFromString(`\r\n            <div class=\"spinner-blades --spin\">\r\n                <span class=\"spinner-blades__part --top-left\"></span>\r\n                <span class=\"spinner-blades__part --top-right\"></span>\r\n                <span class=\"spinner-blades__part --bottom-left\"></span>\r\n                <span class=\"spinner-blades__part --bottom-right\"></span>\r\n            </div>\r\n        `, 'text/html').body.firstChild as HTMLElement;\r\n\r\n        return content;\r\n    }\r\n\r\n    private _buildStyleContent(): string {\r\n        const styleContent = `\r\n            @keyframes spin {\r\n                0% {\r\n                    transform: rotate(0deg) scale(1);\r\n                }\r\n                25% {\r\n                    transform: rotate(180deg) scale(.9);\r\n                }\r\n                50% {\r\n                    transform: rotate(540deg) scale(.7);\r\n                }\r\n                74% {\r\n                    transform: rotate(720deg) scale(.9);\r\n                }\r\n                100% {\r\n                    transform: rotate(900deg) scale(1);\r\n                }\r\n            }\r\n\r\n            .--spin {\r\n                animation: spin 1s linear infinite;\r\n            }\r\n\r\n            .spinner-blades {\r\n                position: relative;\r\n                display: grid;\r\n                grid-template-columns: repeat(2, auto);\r\n                grid-template-rows: repeat(2, auto);\r\n                width: var(--zooduck-icon-size);\r\n                height: var(--zooduck-icon-size);\r\n                background-color: var(--zooduck-icon-background-color);\r\n                clip-path: circle(50%);\r\n                padding: 10px;\r\n            }\r\n\r\n            .spinner-blades__part {\r\n                border-style: solid;\r\n                border-color: var(--zooduck-icon-color);\r\n                border-top-width: 0;\r\n                border-right-width: calc(var(--zooduck-icon-size) * .2);\r\n                border-bottom-width: calc(var(--zooduck-icon-size) * .2);\r\n                border-left-width: calc(var(--zooduck-icon-size) * .05);\r\n                border-radius: 0 0 50%;\r\n                transform-origin: center;\r\n            }\r\n\r\n            .spinner-blades__part.--top-left {\r\n                transform: rotate(135deg) scale(.7);\r\n            }\r\n\r\n            .spinner-blades__part.--top-right {\r\n                transform: rotate(-135deg) scale(.7);\r\n            }\r\n\r\n            .spinner-blades__part.--bottom-left {\r\n                transform: rotate(45deg) scale(.7);\r\n            }\r\n\r\n            .spinner-blades__part.--bottom-right {\r\n                transform: rotate(-45deg) scale(.7);\r\n            }\r\n        `;\r\n\r\n        return styleContent;\r\n    }\r\n\r\n    protected connectedCallback() {\r\n        if (!this.isConnected) {\r\n            return;\r\n        }\r\n\r\n        this._build();\r\n    }\r\n}\r\n\r\ncustomElements.define(tagName, HTMLZooduckIconSpinnerBladesElement);\r\n","import { HTMLZooduckIconBaseElement } from '../base/zooduck-icon.base';\r\n\r\ntype ToggleState = 'off'|'on';\r\n\r\nconst tagName = 'zooduck-icon-toggle';\r\n\r\nexport class HTMLZooduckIconToggleElement extends HTMLZooduckIconBaseElement {\r\n    private _fontFamily = 'Calibri, sans-serif';\r\n    private _toggleSwitchColor = '#fff';\r\n    private _toggleOffColor = '#ccc';\r\n    private _toggleOffText = '';\r\n    private _toggleOffTextColor = '#fff';\r\n    private _toggleOnColor = '#222';\r\n    private _toggleOnText  = '';\r\n    private _toggleOnTextColor = '#fff';\r\n    private _toggleState: ToggleState = 'off';\r\n    private _width = '0'; // the icon's width is automatically calculated based on its size attribute, but if a fixed width is desired it can be set using this attribute\r\n\r\n    constructor() {\r\n        super();\r\n    }\r\n\r\n    static get observedAttributes() {\r\n        return [\r\n            'fontfamily',\r\n            'size',\r\n            'toggleoffcolor',\r\n            'toggleofftext',\r\n            'toggleofftextcolor',\r\n            'toggleoncolor',\r\n            'toggleontext',\r\n            'toggleontextcolor',\r\n            'togglestate',\r\n            'toggleswitchcolor',\r\n            'width',\r\n        ];\r\n    }\r\n\r\n    private _buildContent(): HTMLElement {\r\n        const checked = this._toggleState === 'on'\r\n            ? 'checked'\r\n            : '';\r\n        const content = new DOMParser().parseFromString(`\r\n            <div class=\"toggle-icon\">\r\n                <label>\r\n                    <input type=\"checkbox\" ${checked} />\r\n                    <div class=\"toggle-icon__switch-base\">\r\n                        <span class=\"toggle-icon__text --off\">${this._toggleOffText}</span>\r\n                        <span class=\"toggle-icon__text --on\">${this._toggleOnText}</span>\r\n                    </div>\r\n                    <div class=\"toggle-icon__switch\"></div>\r\n                </label>\r\n            </div>\r\n        `, 'text/html').body.firstChild as HTMLElement;\r\n\r\n        content.querySelector('input').addEventListener('click', (e: Event) => {\r\n            // If a user clicks or taps on zooduck-icon-toggle\r\n            // the checkbox will fire its own click event\r\n            // (even with display set to none)\r\n            e.stopPropagation();\r\n        });\r\n\r\n        return content;\r\n    }\r\n\r\n    private _buildStyleContent(): string {\r\n        const style = `\r\n            :host {\r\n                --toggle-icon-switch-color: ${this._toggleSwitchColor};\r\n                --toggle-icon-font-family: ${this._fontFamily};\r\n                --toggle-icon-font-size: calc(var(--zooduck-icon-size) * .3);\r\n                --toggle-icon-off-color: ${this._toggleOffColor};\r\n                --toggle-icon-off-text-color: ${this._toggleOffTextColor};\r\n                --toggle-icon-on-color: ${this._toggleOnColor};\r\n                --toggle-icon-on-text-color: ${this._toggleOnTextColor};\r\n                --toggle-icon-text-width: ${this._calcTextWidth()}px;\r\n            }\r\n            .toggle-icon {\r\n                box-sizing: content-box !important;\r\n                position: relative;\r\n                width: var(--zooduck-icon-size);\r\n                height: calc(var(--zooduck-icon-size) * .525);\r\n                user-select: none;\r\n                padding-right: var(--toggle-icon-text-width);\r\n            }\r\n            .toggle-icon label {\r\n                position: absolute;\r\n                left: 0;\r\n                top: 0;\r\n                width: 100%;\r\n                height: 100%;\r\n                cursor: pointer;\r\n            }\r\n            .toggle-icon__switch-base {\r\n                position: absolute;\r\n                left: 0;\r\n                top: 0;\r\n                width: 100%;\r\n                height: 100%;\r\n                background-color: var(--toggle-icon-off-color);\r\n                transition: all .25s;\r\n                border-radius: calc(var(--zooduck-icon-size) * .25);\r\n                display: grid;\r\n                align-items: center;\r\n                grid-template-columns: repeat(2, auto);\r\n            }\r\n            .toggle-icon__text {\r\n                margin: 0;\r\n                font-family: var(--toggle-icon-font-family);\r\n                font-size: var(--toggle-icon-font-size);\r\n            }\r\n            .toggle-icon__text.--off {\r\n                grid-column: 1;\r\n                margin-left: calc(var(--zooduck-icon-size) * .125);\r\n                justify-self: left;\r\n                color: var(--toggle-icon-off-text-color);\r\n            }\r\n            .toggle-icon__text.--on {\r\n                grid-column: 2;\r\n                margin-right: calc(var(--zooduck-icon-size) * .125);\r\n                justify-self: right;\r\n                color: var(--toggle-icon-on-text-color);\r\n            }\r\n            .toggle-icon__switch {\r\n                position: absolute;\r\n                left: 100%;\r\n                top: calc(var(--zooduck-icon-size) * .075);\r\n                transform: translateX(calc(-100% - calc(var(--zooduck-icon-size) * .075)));\r\n                width: calc(var(--zooduck-icon-size) * .375);\r\n                height: calc(var(--zooduck-icon-size) * .375);\r\n                background-color: var(--toggle-icon-switch-color);\r\n                clip-path: circle(50%);\r\n                transition: all .25s;\r\n            }\r\n            .toggle-icon input[type=checkbox] {\r\n                display: none !important;\r\n            }\r\n            .toggle-icon input[type=checkbox]:checked ~ .toggle-icon__switch-base {\r\n                background-color: var(--toggle-icon-on-color);\r\n            }\r\n            .toggle-icon input[type=checkbox]:checked ~ .toggle-icon__switch {\r\n                left: calc(var(--zooduck-icon-size) * .075);\r\n                transform: translateX(0);\r\n            }\r\n            .toggle-icon input[type=checkbox]:checked ~ .toggle-icon__switch-base .toggle-icon__text.--off {\r\n                display: none;\r\n            }\r\n            .toggle-icon input[type=checkbox]:not(:checked) ~ .toggle-icon__switch-base .toggle-icon__text.--on {\r\n                display: none;\r\n            }\r\n        `;\r\n\r\n        return style;\r\n    }\r\n\r\n    private _calcTextWidth(): number {\r\n        const fixedWidth = parseInt(this._width, 10);\r\n        const widthBeforePadding = parseInt(this.size, 10);\r\n\r\n        if (fixedWidth) {\r\n            return (fixedWidth - widthBeforePadding);\r\n        }\r\n\r\n        const canvas = document.createElement('canvas');\r\n        const context = canvas.getContext('2d');\r\n        const fontSize = `${(widthBeforePadding * .3)}px`;\r\n        const font = `${fontSize} ${this._fontFamily}`;\r\n        context.font = font;\r\n\r\n        const dominantText = this._toggleOnText.length > this._toggleOffText.length\r\n            ? this._toggleOnText\r\n            : this._toggleOffText;\r\n\r\n        return context.measureText(dominantText).width;\r\n    }\r\n\r\n    private _build() {\r\n        this.styleContent = this._buildStyleContent();\r\n        this.content = this._buildContent();\r\n        this._registerEvents();\r\n\r\n        this.render();\r\n    }\r\n\r\n    private _onCheckboxChange() {\r\n        this._toggleState = this._toggleState === 'off'\r\n            ? 'on'\r\n            : 'off';\r\n        this.dispatchEvent(new CustomEvent('zooduck-icon-toggle:change', {\r\n            detail: {\r\n                toggleState: this._toggleState,\r\n            }\r\n        }));\r\n    }\r\n\r\n    private _registerEvents() {\r\n        const checkbox = this.content.querySelector('input[type=checkbox]');\r\n        checkbox.addEventListener('change', this._onCheckboxChange.bind(this));\r\n    }\r\n\r\n    public set fontfamily(val: string) {\r\n        this._fontFamily = val;\r\n    }\r\n\r\n    public get fontfamily(): string {\r\n        return this._fontFamily;\r\n    }\r\n\r\n    public set toggleoffcolor(val: string) {\r\n        this._toggleOffColor = val;\r\n    }\r\n\r\n    public get toggleoffcolor(): string {\r\n        return this._toggleOffColor;\r\n    }\r\n\r\n    public set toggleofftext(val: string) {\r\n        this._toggleOffText = val;\r\n    }\r\n\r\n    public get toggleofftext(): string {\r\n        return this._toggleOffText;\r\n    }\r\n\r\n    public set toggleofftextcolor(val: string) {\r\n        this._toggleOffTextColor = val;\r\n    }\r\n\r\n    public get toggleofftextcolor(): string {\r\n        return this._toggleOffTextColor;\r\n    }\r\n\r\n    public set toggleoncolor(val: string) {\r\n        this._toggleOnColor = val;\r\n    }\r\n\r\n    public get toggleoncolor(): string {\r\n        return this._toggleOnColor;\r\n    }\r\n\r\n    public set toggleontext(val: string) {\r\n        this._toggleOnText = val;\r\n    }\r\n\r\n    public get toggleontext(): string {\r\n        return this._toggleOnText;\r\n    }\r\n\r\n    public set toggleontextcolor(val: string) {\r\n        this._toggleOnTextColor = val;\r\n    }\r\n\r\n    public get toggleontextcolor() {\r\n        return this._toggleOnTextColor;\r\n    }\r\n\r\n    public set togglestate(val: ToggleState) {\r\n        this._toggleState = val;\r\n    }\r\n\r\n    public get togglestate(): ToggleState {\r\n        return this._toggleState;\r\n    }\r\n\r\n    public set toggleswitchcolor(val: string) {\r\n        this._toggleSwitchColor = val;\r\n    }\r\n\r\n    public get toggleswitchcolor(): string {\r\n        return this._toggleSwitchColor;\r\n    }\r\n\r\n    public set width(val: string) {\r\n        this._width = val;\r\n    }\r\n\r\n    public get width(): string {\r\n        return this._width;\r\n    }\r\n\r\n    protected attributeChangedCallback(name: string, _oldVal: string, newVal: string) {\r\n        if (newVal === null || this[name] === newVal) {\r\n            return;\r\n        }\r\n\r\n        this[name] = newVal;\r\n\r\n        this._build();\r\n    }\r\n\r\n    protected connectedCallback() {\r\n        if (!this.isConnected) {\r\n            return;\r\n        }\r\n\r\n        this._build();\r\n    }\r\n}\r\n\r\ncustomElements.define(tagName, HTMLZooduckIconToggleElement);\r\n","import { HTMLZooduckIconBaseElement } from '../base/zooduck-icon.base';\r\n\r\nconst tagName = 'zooduck-icon-circle';\r\n\r\nexport class HTMLZooduckIconCircleElement extends HTMLZooduckIconBaseElement {\r\n    constructor() {\r\n        super();\r\n\r\n        this.defaultBackgroundColor = 'transparent';\r\n    }\r\n\r\n    private _build() {\r\n        this.styleContent = this._buildStyleContent();\r\n        this.content = this._buildContent();\r\n\r\n        this.render();\r\n    }\r\n\r\n    private _buildContent(): HTMLElement {\r\n        const content = new DOMParser().parseFromString(`\r\n            <div class=\"icon-circle\"></div>\r\n        `, 'text/html').body.firstChild as HTMLElement;\r\n\r\n        return content;\r\n    }\r\n\r\n    private _buildStyleContent(): string {\r\n        const styleContent = `\r\n            .icon-circle {\r\n                width: var(--zooduck-icon-size);\r\n                height: var(--zooduck-icon-size);\r\n                color: var(--zooduck-icon-color);\r\n                background-color: var(--zooduck-icon-background-color);\r\n                border-radius: 50%;\r\n                border: solid calc(var(--zooduck-icon-size) * .2);\r\n            }\r\n        `;\r\n\r\n        return styleContent;\r\n    }\r\n\r\n    protected connectedCallback() {\r\n        if (!this.isConnected) {\r\n            return;\r\n        }\r\n\r\n        this._build();\r\n    }\r\n}\r\n\r\ncustomElements.define(tagName, HTMLZooduckIconCircleElement);\r\n","import { HTMLZooduckIconLocationElement } from './location/zooduck-icon.location';\r\nimport { HTMLZooduckIconSkyduckElement } from './skyduck/zooduck-icon.skyduck';\r\nimport { HTMLZooduckIconSkyduckAltElement } from './skyduck-alt/zooduck-icon.skyduck-alt';\r\nimport { HTMLZooduckIconSkyduckInFlightElement } from './skyduck-in-flight/zooduck-icon.skyduck-in-flight';\r\nimport { HTMLZooduckIconSpinnerBladesElement } from './spinner-blades/zooduck-icon.spinner-blades';\r\nimport { HTMLZooduckIconToggleElement } from './toggle/zooduck-icon.toggle';\r\nimport { HTMLZooduckIconCircleElement } from './circle/zooduck-icon.circle';\r\n\r\nexport {\r\n    HTMLZooduckIconCircleElement,\r\n    HTMLZooduckIconLocationElement,\r\n    HTMLZooduckIconSkyduckElement,\r\n    HTMLZooduckIconSkyduckAltElement,\r\n    HTMLZooduckIconSkyduckInFlightElement,\r\n    HTMLZooduckIconSpinnerBladesElement,\r\n    HTMLZooduckIconToggleElement,\r\n};\r\n","import './scripts/zooduck-icons/index';\r\n"]}